package immigrants;

import immigrants.Immigrant.SomeNames;

import java.util.ArrayList;
import java.util.Random;

public class Demo {

	public static void main(String[] args) {
		
		
		Country country = new Country("England",5);
		ArrayList<Immigrant> newWave = new ArrayList<Immigrant>();
		
		for (int i = 0; newWave.size() <= 100; i++) {
			int newPercent = new Random().nextInt(100);
			if(newPercent<25) {
				Radical rad = new Radical(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
						,new Random().nextInt(500));
				int chancePassport = new Random().nextInt(100);
				if(chancePassport<35) {
				rad.setPassport(new Passport(rad.getName(),new Random().nextInt(80),rad.getCity(),rad.getCountry()));
				if(newWave.size()<3) {
					rad.setRelative(new Radical(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
					rad.setRelative(new Radical(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
				}
				else {
				int countRelatives=0;
				while(countRelatives<2) {
				Immigrant relative = newWave.get(new Random().nextInt(newWave.size()-1));
				if(!relative.equals(rad)) {
				rad.setRelative(relative);
				countRelatives++;
						}
					}
				}
				newWave.add(rad);
				
			}
		}
			else if(newPercent<60) {
				Extremist ext = new Extremist(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
						,new Random().nextInt(500));
				if(newWave.size()<3) {
					ext.setRelative(new Extremist(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
					ext.setRelative(new Extremist(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
				}
				else {
				int countRelatives=0;
				while(countRelatives<2) {
				Immigrant relative = newWave.get(new Random().nextInt(newWave.size()-1));
				if(!relative.equals(ext)) {
					ext.setRelative(relative);
				countRelatives++;
						}
					}
				}
				newWave.add(ext);
			}
			else if(newPercent<100) {
				Normal nor = new Normal(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
						,new Random().nextInt(500));
				nor.setPassport(new Passport(rad.getName(),new Random().nextInt(80),rad.getCity(),rad.getCountry()));
				if(newWave.size()<3) {
					nor.setRelative(new Normal(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
					nor.setRelative(new Normal(SomeNames.values()[new Random().nextInt(SomeNames.values().length)].toString()
							,new Random().nextInt(500)));
				}
				else {
				int countRelatives=0;
				while(countRelatives<2) {
				Immigrant relative = newWave.get(new Random().nextInt(newWave.size()-1));
				if(!relative.equals(nor)) {
					nor.setRelative(relative);
				countRelatives++;
						}
					}
				}
				newWave.add(nor);
			}
		}

	}
}
